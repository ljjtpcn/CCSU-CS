/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	PRINT_OPTIONS = "Print_options_version 6\
range_start 0ps\
range_end 10.0ms\
width 1\
names_percentage 25\
comments 1\
grid_lines 1\
time_bars 1\
name_every_page 0\
expand_groups 0\
print_all 1\
print_row_height 100";
	DATA_OFFSET = 0.0;
	DATA_DURATION = 10000000.0;
	SIMULATION_TIME = 10000000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 50000.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("clk")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("dout")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = BIDIR;
	PARENT = "";
}

SIGNAL("dout[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("dout[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = BIDIR;
	PARENT = "dout";
}

SIGNAL("k")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("k[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("k[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "k";
}

SIGNAL("reset")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("seg")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("seg[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("seg[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "seg";
}

SIGNAL("y")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = BUS;
	WIDTH = 8;
	LSB_INDEX = 0;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("y[7]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("y[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "y";
}

SIGNAL("dout[0]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[1]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[2]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[3]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[4]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[5]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[6]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("dout[7]~result")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

GROUP("dout~result")
{
	MEMBERS = "dout[7]~result", "dout[6]~result", "dout[5]~result", "dout[4]~result", "dout[3]~result", "dout[2]~result", "dout[1]~result", "dout[0]~result";
}

TRANSITION_LIST("clk")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 200;
			LEVEL 0 FOR 25000.0;
			LEVEL 1 FOR 25000.0;
		}
	}
}

TRANSITION_LIST("dout[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("k[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("k[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
		LEVEL 1 FOR 50000.0;
		LEVEL 0 FOR 9900000.0;
	}
}

TRANSITION_LIST("reset")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 50000.0;
		LEVEL 1 FOR 9950000.0;
	}
}

TRANSITION_LIST("seg[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 2025018.122;
		LEVEL 0 FOR 0.312;
		LEVEL 1 FOR 1500000.0;
		LEVEL 0 FOR 0.364;
		LEVEL 1 FOR 2499999.324;
		LEVEL 0 FOR 0.312;
		LEVEL 1 FOR 1500000.0;
		LEVEL 0 FOR 0.364;
		LEVEL 1 FOR 2474981.202;
	}
}

TRANSITION_LIST("seg[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 525018.343;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 2999999.593;
			LEVEL 0 FOR 0.507;
			LEVEL 1 FOR 1.004;
			LEVEL 0 FOR 999998.896;
		}
		LEVEL 1 FOR 1474981.657;
	}
}

TRANSITION_LIST("seg[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 525018.827;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 3000000.614;
			LEVEL 0 FOR 999999.386;
		}
		LEVEL 1 FOR 1474981.173;
	}
}

TRANSITION_LIST("seg[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 25018.126;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 0.312;
			LEVEL 0 FOR 499999.492;
			LEVEL 1 FOR 1500000.196;
			LEVEL 0 FOR 0.312;
			LEVEL 1 FOR 1500000.0;
			LEVEL 0 FOR 499999.688;
		}
		LEVEL 1 FOR 0.312;
		LEVEL 0 FOR 499999.492;
		LEVEL 1 FOR 1474982.07;
	}
}

TRANSITION_LIST("seg[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1525018.446;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 0.276;
			LEVEL 1 FOR 499999.412;
			LEVEL 0 FOR 0.312;
			LEVEL 1 FOR 1499999.488;
			LEVEL 0 FOR 1.508;
			LEVEL 1 FOR 1999999.004;
		}
		LEVEL 0 FOR 0.276;
		LEVEL 1 FOR 474981.278;
	}
}

TRANSITION_LIST("seg[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 525018.305;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 0.491;
			LEVEL 1 FOR 1499999.329;
			LEVEL 0 FOR 0.312;
			LEVEL 1 FOR 1500000.276;
			LEVEL 0 FOR 0.696;
			LEVEL 1 FOR 999998.896;
		}
		LEVEL 0 FOR 0.491;
		LEVEL 1 FOR 1474981.204;
	}
}

TRANSITION_LIST("seg[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 525018.797;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 999999.551;
			LEVEL 1 FOR 0.505;
			LEVEL 0 FOR 1999999.084;
			LEVEL 1 FOR 0.772;
			LEVEL 0 FOR 0.743;
			LEVEL 1 FOR 999999.345;
		}
		LEVEL 0 FOR 999999.551;
		LEVEL 1 FOR 0.505;
		LEVEL 0 FOR 474981.147;
	}
}

TRANSITION_LIST("seg[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 10000000.0;
	}
}

TRANSITION_LIST("y[7]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1525013.912;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 0.466;
			LEVEL 1 FOR 1000000.0;
			LEVEL 0 FOR 0.578;
			LEVEL 1 FOR 500000.0;
			LEVEL 0 FOR 499998.956;
			LEVEL 1 FOR 2000000.0;
		}
		LEVEL 0 FOR 0.466;
		LEVEL 1 FOR 474985.622;
	}
}

TRANSITION_LIST("y[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1525014.467;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 1.613;
			LEVEL 1 FOR 1000000.0;
			LEVEL 0 FOR 499998.669;
			LEVEL 1 FOR 2499999.718;
		}
		LEVEL 0 FOR 1.613;
		LEVEL 1 FOR 474983.92;
	}
}

TRANSITION_LIST("y[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1525013.624;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 0.563;
			LEVEL 1 FOR 500000.0;
			LEVEL 0 FOR 499999.437;
			LEVEL 1 FOR 3000000.0;
		}
		LEVEL 0 FOR 0.563;
		LEVEL 1 FOR 474985.813;
	}
}

TRANSITION_LIST("y[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1525014.069;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 500000.0;
			LEVEL 1 FOR 3500000.0;
		}
		LEVEL 0 FOR 474985.931;
	}
}

TRANSITION_LIST("y[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 1025014.036;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 500000.0;
			LEVEL 1 FOR 3500000.0;
		}
		LEVEL 0 FOR 500000.0;
		LEVEL 1 FOR 474985.964;
	}
}

TRANSITION_LIST("y[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 525015.364;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 499998.667;
			LEVEL 1 FOR 2499999.669;
			LEVEL 0 FOR 1.664;
			LEVEL 1 FOR 1000000.0;
		}
		LEVEL 0 FOR 499998.667;
		LEVEL 1 FOR 974985.969;
	}
}

TRANSITION_LIST("y[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 1 FOR 25014.061;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 500000.0;
			LEVEL 1 FOR 3500000.0;
		}
		LEVEL 0 FOR 500000.0;
		LEVEL 1 FOR 1474985.939;
	}
}

TRANSITION_LIST("y[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 25013.939;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 500000.0;
			LEVEL 0 FOR 1.227;
			LEVEL 1 FOR 3000000.0;
			LEVEL 0 FOR 499998.773;
		}
		LEVEL 1 FOR 500000.0;
		LEVEL 0 FOR 1.227;
		LEVEL 1 FOR 1474984.834;
	}
}

TRANSITION_LIST("dout[0]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[1]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[2]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[3]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[4]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[5]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[6]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

TRANSITION_LIST("dout[7]~result")
{
	NODE
	{
		REPEAT = 1;
		LEVEL Z FOR 10000000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "clk";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "dout";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
	CHILDREN = 2, 3, 4, 5, 6, 7, 8, 9;
}

DISPLAY_LINE
{
	CHANNEL = "dout[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 2;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 3;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 4;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "dout[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 9;
	TREE_LEVEL = 1;
	PARENT = 1;
}

DISPLAY_LINE
{
	CHANNEL = "k";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 10;
	TREE_LEVEL = 0;
	CHILDREN = 11, 12, 13, 14, 15, 16, 17, 18;
}

DISPLAY_LINE
{
	CHANNEL = "k[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 17;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "k[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 10;
}

DISPLAY_LINE
{
	CHANNEL = "reset";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 19;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "seg";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 20;
	TREE_LEVEL = 0;
	CHILDREN = 21, 22, 23, 24, 25, 26, 27, 28;
}

DISPLAY_LINE
{
	CHANNEL = "seg[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 21;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 22;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 23;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 24;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 25;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 26;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 27;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "seg[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 28;
	TREE_LEVEL = 1;
	PARENT = 20;
}

DISPLAY_LINE
{
	CHANNEL = "y";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 29;
	TREE_LEVEL = 0;
	CHILDREN = 30, 31, 32, 33, 34, 35, 36, 37;
}

DISPLAY_LINE
{
	CHANNEL = "y[7]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 30;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 31;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 32;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 33;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 34;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 35;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 36;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "y[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 37;
	TREE_LEVEL = 1;
	PARENT = 29;
}

DISPLAY_LINE
{
	CHANNEL = "dout~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 38;
	TREE_LEVEL = 0;
	CHILDREN = 39, 40, 41, 42, 43, 44, 45, 46;
}

DISPLAY_LINE
{
	CHANNEL = "dout[7]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 39;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[6]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 40;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[5]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 41;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[4]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 42;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[3]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 43;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[2]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 44;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[1]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 45;
	TREE_LEVEL = 1;
	PARENT = 38;
}

DISPLAY_LINE
{
	CHANNEL = "dout[0]~result";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Hexadecimal;
	TREE_INDEX = 46;
	TREE_LEVEL = 1;
	PARENT = 38;
}

TIME_BAR
{
	TIME = 6525;
	MASTER = TRUE;
}
;
